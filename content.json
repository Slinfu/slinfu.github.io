{"meta":{"title":"Slinfu的小木屋","subtitle":"","description":"","author":"Slinfu","url":"https://slinfu.github.io","root":"/"},"pages":[],"posts":[{"title":"Vue之watch监听器","slug":"Vue之watch监听器","date":"2022-02-12T03:49:13.000Z","updated":"2022-02-12T08:16:56.553Z","comments":true,"path":"2022/02/12/Vue之watch监听器/","link":"","permalink":"https://slinfu.github.io/2022/02/12/Vue%E4%B9%8Bwatch%E7%9B%91%E5%90%AC%E5%99%A8/","excerpt":"watch监听器的两种写法：1.函数写法（不会自动触发） 缺点： 不会自动触发触发 12345watch:&#123; username(newVal,oldVal)&#123; ... &#125;&#125; 2.对象格式 优点： 可利用immediate属性，去设置立即触发一次侦听器； 可利用deep属性侦听对象的属性改变； 12345678watch:&#123; username:&#123; handler(newVal,oldVal)&#123; ... &#125;, immediate: true, // 表示一进来就触发侦听器 &#125;&#125;","text":"watch监听器的两种写法：1.函数写法（不会自动触发） 缺点： 不会自动触发触发 12345watch:&#123; username(newVal,oldVal)&#123; ... &#125;&#125; 2.对象格式 优点： 可利用immediate属性，去设置立即触发一次侦听器； 可利用deep属性侦听对象的属性改变； 12345678watch:&#123; username:&#123; handler(newVal,oldVal)&#123; ... &#125;, immediate: true, // 表示一进来就触发侦听器 &#125;&#125; 对象属性的侦听1.deep深度侦听（可侦听对象内的属性改变） 12345678910111213141516data:&#123; user:&#123; name: &#x27;&#x27;, sex: &#x27;&#x27;, &#125;&#125;watch:&#123; user:&#123; handler(newVal,oldVal)&#123; ... &#125; , immediate: true, // 表示一进来就触发侦听器 deep: true, // 表示开启深度侦听，只要对象内的任意属性发生改变，都会触发侦听器 &#125;&#125; 2.只侦听对象的某个属性（写法如下） 1234567891011data:&#123; user:&#123; name: &#x27;&#x27;, sex: &#x27;&#x27;, &#125;&#125;watch:&#123; &#x27;user.name&#x27;(newVal,oldVal)&#123; ... &#125;&#125;","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://slinfu.github.io/tags/Vue/"},{"name":"watch监听器","slug":"watch监听器","permalink":"https://slinfu.github.io/tags/watch%E7%9B%91%E5%90%AC%E5%99%A8/"}]},{"title":"实用工具方法篇-02","slug":"实用工具篇-02","date":"2021-02-11T17:19:23.000Z","updated":"2022-02-12T08:19:24.270Z","comments":true,"path":"2021/02/12/实用工具篇-02/","link":"","permalink":"https://slinfu.github.io/2021/02/12/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AF%87-02/","excerpt":"原理：使用constructor指向该对象的基本对象构造函数类型的属性，获取要进行深拷贝的是对象还是数组。再通过Object.keys获取对象的key，然后使用typeof获取该key对应的元素，若仍为object（此时代表是数组或json对象），则继续调用拷贝方法进行深度拷贝，否则就直接进行拷贝，从而实现深拷贝。","text":"原理：使用constructor指向该对象的基本对象构造函数类型的属性，获取要进行深拷贝的是对象还是数组。再通过Object.keys获取对象的key，然后使用typeof获取该key对应的元素，若仍为object（此时代表是数组或json对象），则继续调用拷贝方法进行深度拷贝，否则就直接进行拷贝，从而实现深拷贝。 1234567891011121314function deepClone(source) &#123; if (!source &amp;&amp; typeof source !== &#x27;object&#x27;) &#123; throw new Error(&#x27;error arguments&#x27;, &#x27;deepClone&#x27;) &#125; const targetObj = source.constructor === Array ? [] : &#123;&#125; Object.keys(source).forEach(keys =&gt; &#123; if (source[keys] &amp;&amp; typeof source[keys] === &#x27;object&#x27;) &#123; targetObj[keys] = deepClone(source[keys]) &#125; else &#123; targetObj[keys] = source[keys] &#125; &#125;) return targetObj&#125;","categories":[],"tags":[{"name":"深拷贝","slug":"深拷贝","permalink":"https://slinfu.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"}]},{"title":"实用工具方法篇-01 正则校验","slug":"实用工具篇-01","date":"2021-02-11T03:49:13.000Z","updated":"2022-02-12T07:23:35.419Z","comments":true,"path":"2021/02/11/实用工具篇-01/","link":"","permalink":"https://slinfu.github.io/2021/02/11/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AF%87-01/","excerpt":"","text":"常用正则校验（会持续不断更新）1.手机正则校验 1telReg = /^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$/ 2.邮箱正则检验 1mailReg = /^(\\w-*\\.*)+@(\\w-?)+(\\.\\w&#123;2,&#125;)+$/; 3.ip地址校验 1ipReg = /^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$/;","categories":[],"tags":[{"name":"正则校验","slug":"正则校验","permalink":"https://slinfu.github.io/tags/%E6%AD%A3%E5%88%99%E6%A0%A1%E9%AA%8C/"}]}],"categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://slinfu.github.io/tags/Vue/"},{"name":"watch监听器","slug":"watch监听器","permalink":"https://slinfu.github.io/tags/watch%E7%9B%91%E5%90%AC%E5%99%A8/"},{"name":"深拷贝","slug":"深拷贝","permalink":"https://slinfu.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"},{"name":"正则校验","slug":"正则校验","permalink":"https://slinfu.github.io/tags/%E6%AD%A3%E5%88%99%E6%A0%A1%E9%AA%8C/"}]}